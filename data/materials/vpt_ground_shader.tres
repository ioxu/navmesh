[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://bw245yx2u6f6r"]

[ext_resource type="Texture2D" uid="uid://c2yeqjm2e1krw" path="res://data/textures/uvgrid_01.jpg" id="1_dkaaq"]

[sub_resource type="Shader" id="Shader_174sx"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;//,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;

uniform vec2 uv1_scale;
uniform vec2 uv1_offset;
uniform vec2 uv2_scale;
uniform vec2 uv2_offset;
varying vec2 uv_world_pos;


uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;

void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	//uv1_power_normal=pow(abs(mat3(MODEL_MATRIX) * NORMAL),vec3(uv1_blend_sharpness));
	//uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz * uv1_scale + uv1_offset;
	//uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	//uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);

	//(MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz
	//uv_world_pos = vec2(VERTEX.x, VERTEX.z)*uv1_scale.xy+uv1_offset.xy;
	uv_world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xz*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	//vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	vec4 albedo_tex = texture(texture_albedo,uv_world_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	//float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	//METALLIC = metallic_tex * metallic;
	//vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	//float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	//ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,uv_world_pos).rgb;
	EMISSION = (emission.rgb*emission_tex)*emission_energy;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_174sx")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector2(0.025, 0.025)
shader_parameter/uv1_offset = Vector2(-0.5, -0.5)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/emission = Color(0.145098, 0.262745, 0.85098, 1)
shader_parameter/emission_energy = 0.0
shader_parameter/texture_albedo = ExtResource("1_dkaaq")
